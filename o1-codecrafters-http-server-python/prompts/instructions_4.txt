starting with the code: ```
import socket  # noqa: F401
from urllib.parse import unquote

def main():
    # You can use print statements as follows; they'll be visible when running tests.
    print("Logs from your program will appear here!")

    server_socket = socket.create_server(("localhost", 4221), reuse_port=True)
    while True:
        client_connection, client_address = server_socket.accept()
        with client_connection:
            try:
                # Read the request
                request = client_connection.recv(1024)
                # Decode the request from bytes to string
                request_str = request.decode('utf-8')
                # Split the request into lines
                request_lines = request_str.split('\r\n')
                # Get the request line (first line)
                request_line = request_lines[0]
                # Split the request line into its components
                request_parts = request_line.split(' ')
                if len(request_parts) >= 2:
                    method, path = request_parts[0], request_parts[1]
                    # Check the path
                    if path == '/':
                        response = b"HTTP/1.1 200 OK\r\n\r\n"
                    elif path.startswith('/echo/'):
                        # Extract the string after '/echo/'
                        echo_str = path[len('/echo/'):]
                        # URL-decode the string
                        echo_str = unquote(echo_str)
                        # Encode the response body
                        response_body = echo_str.encode('utf-8')
                        content_length = len(response_body)
                        # Prepare headers
                        response_headers = (
                            "HTTP/1.1 200 OK\r\n"
                            "Content-Type: text/plain\r\n"
                            f"Content-Length: {content_length}\r\n"
                            "\r\n"
                        )
                        response = response_headers.encode('utf-8') + response_body
                    else:
                        response = b"HTTP/1.1 404 Not Found\r\n\r\n"
                else:
                    # Malformed request
                    response = b"HTTP/1.1 400 Bad Request\r\n\r\n"
                # Send the HTTP response
                client_connection.sendall(response)
            except Exception as e:
                # In case of any exception, send 500 Internal Server Error
                error_response = b"HTTP/1.1 500 Internal Server Error\r\n\r\n"
                client_connection.sendall(error_response)
            finally:
                # Close the connection
                client_connection.close()

if __name__ == "__main__":
    main()


```

Your Task is to implement the following:

In this stage, you'll implement the /user-agent endpoint, which reads the User-Agent request header and returns it in the response body.
The User-Agent header

The User-Agent header describes the client's user agent.

Your /user-agent endpoint must read the User-Agent header, and return it in your response body. Here's an example of a /user-agent request:

// Request line
GET
/user-agent
HTTP/1.1
\r\n

// Headers
Host: localhost:4221\r\n
User-Agent: foobar/1.2.3\r\n  // Read this value
Accept: */*\r\n
\r\n

// Request body (empty)

Here is the expected response:

// Status line
HTTP/1.1 200 OK               // Status code must be 200
\r\n

// Headers
Content-Type: text/plain\r\n
Content-Length: 12\r\n
\r\n

// Response body
foobar/1.2.3                  // The value of `User-Agent`

Tests

The tester will execute your program like this:

$ ./your_program.sh

The tester will then send a GET request to the /user-agent endpoint on your server. The request will have a User-Agent header.

$ curl -v --header "User-Agent: foobar/1.2.3" http://localhost:4221/user-agent

Your server must respond with a 200 response that contains the following parts:

    Content-Type header set to text/plain.
    Content-Length header set to the length of the User-Agent value.
    Message body set to the User-Agent value.

HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 12\r\n\r\nfoobar/1.2.3

Notes

    Header names are case-insensitive.


