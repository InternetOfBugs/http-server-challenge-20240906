Starting with the code: ```
import socket  # noqa: F401

def main():
    # You can use print statements as follows; they'll be visible when running tests.
    print("Logs from your program will appear here!")

    server_socket = socket.create_server(("localhost", 4221), reuse_port=True)
    while True:
        client_connection, client_address = server_socket.accept()
        with client_connection:
            # Read the request
            request = client_connection.recv(1024)
            # Decode the request from bytes to string
            request_str = request.decode('utf-8')
            # Split the request into lines
            request_lines = request_str.split('\r\n')
            # Get the request line (first line)
            request_line = request_lines[0]
            # Split the request line into its components
            request_parts = request_line.split(' ')
            if len(request_parts) >= 2:
                method, path = request_parts[0], request_parts[1]
                # Check the path
                if path == '/':
                    response = b"HTTP/1.1 200 OK\r\n\r\n"
                else:
                    response = b"HTTP/1.1 404 Not Found\r\n\r\n"
            else:
                # Malformed request
                response = b"HTTP/1.1 400 Bad Request\r\n\r\n"
            # Send the HTTP response
            client_connection.sendall(response)
            # Close the connection
            client_connection.close()

if __name__ == "__main__":
    main()

```
Your Task is to do the following:

In this stage, you'll implement the /echo/{str} endpoint, which accepts a string and returns it in the response body.
Response body

A response body is used to return content to the client. This content may be an entire web page, a file, a string, or anything else that can be represented with bytes.

Your /echo/{str} endpoint must return a 200 response, with the response body set to given string, and with a Content-Type and Content-Length header.

Here's an example of an /echo/{str} request:

GET /echo/abc HTTP/1.1\r\nHost: localhost:4221\r\nUser-Agent: curl/7.64.1\r\nAccept: */*\r\n\r\n

And here's the expected response:

HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 3\r\n\r\nabc

Here's a breakdown of the response:

// Status line
HTTP/1.1 200 OK
\r\n                          // CRLF that marks the end of the status line

// Headers
Content-Type: text/plain\r\n  // Header that specifies the format of the response body
Content-Length: 3\r\n         // Header that specifies the size of the response body, in bytes
\r\n                          // CRLF that marks the end of the headers

// Response body
abc                           // The string from the request

The two headers are required for the client to be able to parse the response body. Note that each header ends in a CRLF, and the entire header section also ends in a CRLF.
Tests

The tester will execute your program like this:

$ ./your_program.sh

The tester will then send a GET request to the /echo/{str} endpoint on your server, with some random string.

$ curl -v http://localhost:4221/echo/abc

Your server must respond with a 200 response that contains the following parts:

    Content-Type header set to text/plain.
    Content-Length header set to the length of the given string.
    Response body set to the given string.

HTTP/1.1 200 OK\r\nContent-Type: text/plain\r\nContent-Length: 3\r\n\r\nabc

